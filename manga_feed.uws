
call scrapers.uws

const out_xml = "docs\index.xml"
const channel_json = "channel.json"
const log_file = "manga_feed.log"
scrapers = get_scrapers()

print_now("Begin manga_feed")
check_immediately(scrapers)

while TRUE
    check_on_schedule(scrapers)
    repeat
        sleep(300)
        gettime()
    until 0 <= G_TIME_NN and G_TIME_NN <= 5 // n時0分から5分の間になるまで待つ
wend

procedure check_on_schedule(scrapers)
    channel = load_channel()
    remove_old_item(channel)
    cnt = check_for_update(scrapers, channel)
    gen_rss_and_push(channel, cnt)
    save_channel(channel)
fend

procedure check_immediately(scrapers)
    channel = load_channel()
    remove_old_item(channel)
    cnt = check_for_update(scrapers, channel, true)
    gen_rss_and_push(channel, cnt)
    save_channel(channel)
fend

function load_channel()
    if fopen(channel_json, F_EXISTS) then
        json = fget(fopen(channel_json, F_READ or F_AUTOCLOSE), F_ALLTEXT)
        try
            result = fromjson(json)
            exit
        except
        endtry
    endif
    result = @{
        "title": "Webまんがフィード",
        "link": "https://github.com/stuncloud/manga_feed",
        "pubDate": null,
        "description": "Webまんがフィードを自力で作っていくやつ",
        "items": []
    }@
fend
procedure save_channel(channel: uobject)
    json = tojson(channel, true)
    fput(fopen(channel_json, F_WRITE8 or F_AUTOCLOSE), json, F_ALLTEXT)
fend

procedure remove_old_item(channel: uobject)
    // 90日経過したアイテムは除去
    limit = gettime(-90, , G_OFFSET_DAYS)
    items = Filter(channel.items).by(|item => item.pubsec > limit|)
    channel.items = items
fend

procedure check_for_update(scrapers, channel: uobject, ignore_check = FALSE)
    gettime()
    result = 0
    for scraper in scrapers.as_array()
        title = scraper.title()
        if ignore_check or scraper.check(G_TIME_WW, G_TIME_HH) then
            print_now("checking <#title>")
            if item := scraper.scrape() then
                print_now("<#title> が更新されました")
                print_now(item)
                channel.items += item
                result += 0
            else
                print_now("更新なし")
            endif
        endif
    next
fend
procedure gen_rss_and_push(channel, cnt)
    if length(channel.items) > 0 then
        channel.pubDate = PubDate().to_string()

        error = format(chr(0), 512)
        if generate("<#channel>", out_xml, error) then
            push_to_github(out_xml, cnt)
        else
            print_now("エラー(<#error>)")
            log = format(gettime(), "%F %T") + ": <#error>"
            fopen(log_file, F_APPEND, log)
        endif
    endif
fend

procedure print_now(msg)
    now = format(gettime(), '%F %T')
    print "<#now>: <#msg>"
fend

procedure push_to_github(xml, cnt)
    print_now("push処理開始")
    print doscmd("git add <#xml>")
    print doscmd("git commit -m <#DBL><#cnt>件更新<#DBL>")
    print doscmd("git push")
    print_now("push処理終了")
fend

class Filter
    dim arr
    procedure Filter(arr: uobject)
        this.arr = arr
    fend
    function by(fn: func)
        result = []
        for item in arr
            if fn(item) then
                result += item
            endif
        next
    fend
endclass

def_dll generate(wstring, wstring, var wstring):bool:rssgen\target\release\rssgen.dll
