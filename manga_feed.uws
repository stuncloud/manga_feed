
def_dll generate(wstring, wstring, var wstring):bool:rssgen\target\release\rssgen.dll

call scrapers.uws

channel = @{
    "title": "Webまんがフィード",
    "link": "https://github.com/stuncloud/manga_feed",
    "pubDate": null,
    "description": "Webまんがフィードを自力で作っていくやつ",
    "items": null
}@
const out_xml = "docs\index.xml"
const log_file = "manga_feed.log"
scrapers = get_scrapers()

print_now("Begin manga_feed")
// 起動時は全部チェック
// items = check_for_update(scrapers, TRUE)
// gen_rss_and_push(channel, items)

while TRUE
    items = check_for_update(scrapers)
    gen_rss_and_push(channel, items)

    repeat
        sleep(300)
        gettime()
    until 0 <= G_TIME_NN and G_TIME_NN <= 5 // n時0分から5分の間になるまで待つ
wend

function check_for_update(scrapers, ignore_check = FALSE)
    gettime()
    result = []
    for scraper in scrapers.as_array()
        title = scraper.title()
        if ignore_check or scraper.check(G_TIME_WW, G_TIME_HH) then
            print_now("checking <#title>")
            if item := scraper.scrape() then
                print_now("<#title> が更新されました")
                print_now(item)
                result += item
            endif
        endif
    next
fend
procedure gen_rss_and_push(channel, items: array)
    if length(items) > 0 then
        items_str = join(items, ", ")
        channel.items = @[<#items_str>]@
        channel.pubDate = PubDate().to_string()

        error = format(chr(0), 512)
        if generate("<#channel>", out_xml, error) then
            push_to_github(out_xml, length(items))
        else
            print_now("エラー(<#error>)")
            log = format(gettime(), "%F %T") + ": <#error>"
            fopen(log_file, F_APPEND, log)
        endif
    endif
fend

procedure print_now(msg)
    now = format(gettime(), '%F %T')
    print "<#now>: <#msg>"
fend

procedure push_to_github(xml, cnt)
    print_now("push処理開始")
    print doscmd("git add <#xml>")
    print doscmd("git commit -m <#DBL><#cnt>件更新<#DBL>")
    print doscmd("git push")
    print_now("push処理終了")
fend
